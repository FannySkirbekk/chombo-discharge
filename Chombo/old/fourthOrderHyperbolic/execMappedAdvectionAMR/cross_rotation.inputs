assert(SpaceDim == 2)

verbosity = 4

# Time stepping
max_step = 100000
max_time = 1.0
fixed_dt = 0.005
cfl = 0.75
initial_cfl = 0.75
max_dt_growth = 1.1
dt_tolerance_factor = 1.1

# Computational domain.
num_cells = (32,32)

# AMR
max_level = 1
ref_ratio = 4 

use_subcycling = True
initial_average = True
useHyperviscosity = 0
hyperviscosity = 0.01

limitFaceValues = 1
enforceMinVal = 1
minVal = 0.0

# Initial condition
radius = 0.25
magnitude = 1.0
center = (0.5, 0.5)
def phi0(x, t):
    r = sqrt((x[0]-center[0])**2 + (x[1]-center[1])**2)
    if r > radius:
        return 0
    else:
        if (abs(x[0] - center[0]) < 0.75*radius and \
            abs(x[1] - center[1]) < 0.20*radius) or \
           (abs(x[0] - center[0]) < 0.20*radius and \
            abs(x[1] - center[1]) < 0.75*radius):
            return 0
        else:
            return magnitude

# Velocity function: pure rotation.
omega = 2*pi
def velocity(x, t):
    r = sqrt((x[0]-center[0])**2 + (x[1]-center[1])**2)
    theta = atan2(x[1]-center[1],x[0]-center[0])
    return (-r*omega*sin(theta), r*omega*cos(theta))

# Output
checkpoint_interval = -1
plot_interval = 10
plot_prefix = 'cross-rotation.%d.'%num_cells[0]
chk_prefix  = 'cross-rotation.%d.'%num_cells[0]

