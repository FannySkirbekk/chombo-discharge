assert(SpaceDim == 2)

verbosity = 4

# Time stepping
max_step = 10000
max_time = 2.0
fixed_dt = 0.001
cfl = 0.75
initial_cfl = 0.75
max_dt_growth = 1.1
dt_tolerance_factor = 1.1

# Computational domain and coordinate system.
coord_sys = 'cylinder'
num_cells = 128
center_point = (0, 0)
central_rectangle_size = (1, 1)
outer_radius = 2

# AMR
max_level = 0
ref_ratio = 4 

#use_subcycling = False
useHyperviscosity = 0
hyperviscosity = 0.01

limitFaceValues = 1
enforceMinVal = 1
minVal = 0.0

# Gaussian initial condition.
center = (0.5,0.5)
center = (0.5, 0)
r0 = 0.5 # Cutoff radius
def phi0(x, t):
    r = sqrt((x[0]-center[0])**2 + (x[1]-center[1])**2)
    if r < r0:
        return exp(-8*r*r)
    else:
        return 0

# Velocity function: pure rotation.
omega = 2*pi
def velocity(x, t):
    r = sqrt((x[0]-center_point[0])**2 + (x[1]-center_point[1])**2)
    theta = atan2(x[1]-center_point[1],x[0]-center_point[0])
    return (-r*omega*sin(theta), r*omega*cos(theta))
velocity = (1, 0)

# Velocity stream function.
#def stream_function(ll, t):
#    return 0

# Output
checkpoint_interval = -1
plot_interval = 1
plot_prefix = 'Gaussian-advection-cylinder.%d.'%num_cells
chk_prefix  = 'Gaussian-advection-cylinder.%d.'%num_cells

