# CosineBell.inputs
# This advection test was taken from Case 1 in Williamson et. al., 
# "A Standard Test Set for Numerical Approximations to the Shallow Water 
#  Equations in Spherical Geometry", JCP (1994).

num_cells = 32
max_level = 0
ref_ratio = 2

normal_predictor = 'PPM'
forward_Euler = False
plot_interval = 10

cfl = 0.8
initial_cfl = 0.1

use_subcycling = False

physics = 'advection'

# ------------------
# Initial conditions
# ------------------

a     = 6.37122e6     # Sphere radius (in meters)
Omega = 7.292e-5      # Rotational velocity (rad/sec)
g     = 9.80616       # Gravitational acceleration (meters/sec**2)

# alpha is the angle between the axis of solid body rotation and the polar
# axis of the spherical coordinate system.
# This test should be run with alpha = 0.0, 0.05, pi/2 - 0.05, and pi/2.
alpha = 0.0

# Center coordinates.
(lambdac, thetac) = (1.5*pi, 0)

# Cosine Bell test pattern in longitude (lambda) and 
# latitude (theta) representation.
h0 = 1000      # ("Height" of Cosine Bell in meters.
R  = a/3       # Bell radius
def CosineBell(lambda, theta):
    r = a * acos(sin(thetac)*sin(theta) + cos(thetac)*cos(theta)*cos(lambda-lambdac))
    if r < R:
        return 0.5 * h0 * (1 + cos(pi*r/R)
    else:
        return 0

# Advecting wind speed (in meters/sec).
u0 = 40.0
def windVelocity(lambda, theta):
    u = u0 * (cos(theta)*cos(alpha) + sin(theta)*cos(lambda)*sin(alpha))
    v = -u0 * sin(lambda)*sin(alpha)
    return (u, v)

solution = CosineBell
velocity = windVelocity

# Examine after one full rotation.
max_time = 1.0/Omega
