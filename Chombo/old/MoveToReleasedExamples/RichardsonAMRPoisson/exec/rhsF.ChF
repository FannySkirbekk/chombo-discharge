C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c     set RHS with some gaussian stuff
c     whutever  :)

      subroutine setrhs (
     &     CHF_FRA[rhs],
     &     CHF_BOX[box],
     &     CHF_CONST_REAL[dx])

      integer CHF_DDECL[i;j;k]
      integer n, ncomp
      REAL_T x, y, z, a
c     REAL_T b
      REAL_T pi, sigma
c      REAL_T  sigma2, sigma4, pix,piy,pi2,sinxy

      ncomp = CHF_NCOMP[rhs]

      pi = Pi
      sigma = .1

      do n = 0, ncomp -1

        CHF_MULTIDO[box;i;j;k]

        z = 0.0
        CHF_DTERM[
         x = dx*(i+half);
         y = dx*(j+half);
         z = dx*(k+half) ]

c         sigma2 = sigma*sigma
c         sigma4 = sigma2*sigma2
c         pix = pi*x
c         piy = pi*y
c         pi2 = pi*pi
c         sinxy = sin(pix)*sin(piy)

c         a = 2.0*exp(-(2.0*x*x - 2.0*x + 1.0 + 2.0*y*y - 2.0*y)/
c     &        sigma2/2.0)*(-pi2*sinxy*sigma4
c     &        - 2.0*cos(pix)*pi*sin(piy)*sigma2*x +
c     &        cos(pix)*pi*sin(piy)*sigma2 -
c     &        2.0*sinxy*sigma2 + 2.0*sinxy*x*x -
c     &        2.0*sinxy*x + sinxy -
c     &        2.0*sin(pix)*cos(piy)*pi*sigma2*y +
c     &        sin(pix)*cos(piy)*pi*sigma2 + 2.0*sinxy*y*y -
c     &        2.0*sinxy*y)/sigma4

c  from maple:
         a = 2.0*exp(-(2.0*x*x-2.0*x+1.0+2.0*y*y-2.0*y)/(sigma*sigma)/2
     $        .0)*(-sin(pi*x)*pi*pi*sin(pi*y)*sigma*sigma*sigma*sigma-2
     $        .0*cos(pi*x)*pi*sin(pi*y)*sigma*sigma*x+cos(pi*x)*pi
     $        *sin(pi*y)*sigma*sigma-2.0*sin(pi*x)*sin(pi*y)*sigma*sigma
     $        +2.0*sin(pi*x)*sin(pi*y)*x*x-2.0*sin(pi*x)*sin(pi*y)*x
     $        +sin(pi*x)*sin(pi*y)-2.0*sin(pi*x)*cos(pi*y)*pi*sigma
     $        *sigma*y+sin(pi*x)*cos(pi*y)*pi*sigma*sigma+2.0*sin(pi*x)
     $        *sin(pi*y)*y*y-2.0*sin(pi*x)*sin(pi*y)*y)/(sigma*sigma
     $        *sigma*sigma)

c     interception!
c         a = -2.0*pi*pi * sin(pi*x) * sin(pi*y)

c  second time (original)
c          t0 =
c     2.0*exp(-(2.0*x*x-2.0*x+1.0+2.0*y*y-2.0*y)/(sigma*sigma)/2.0)*(-sin(
c     pi*x)*pi*pi*sin(pi*y)*sigma*sigma*sigma*sigma-2.0*cos(pi*x)*pi*sin(pi*y)*sigma*
c     sigma*x+cos(pi*x)*pi*sin(pi*y)*sigma*sigma-2.0*sin(pi*x)*sin(pi*y)*sigma*sigma+
c     2.0*sin(pi*x)*sin(pi*y)*x*x-2.0*sin(pi*x)*sin(pi*y)*x+sin(pi*x)*sin(pi*y)-2.0*
c     sin(pi*x)*cos(pi*y)*pi*sigma*sigma*y+sin(pi*x)*cos(pi*y)*pi*sigma*sigma+2.0*sin
c     (pi*x)*sin(pi*y)*y*y-2.0*sin(pi*x)*sin(pi*y)*y)/(sigma*sigma*sigma*sigma);

         rhs(CHF_IX[i;j;k],n) = a

c     gaussian sources
c     a = 0.25*exp((-(x-0.5)**2-(y-0.5)**2)/0.01)
c     b = 0.75*exp((-(x-0.9)**2-(y-0.9)**2)/0.01)
c          a = 0.50*exp((-(x-0.5)**2-(y-0.5)**2)/0.01)
c     b = 0.20*exp((-(x-0.45)**2-(y-0.45)**2)/0.01)
c          b = 0
c          rhs(CHF_IX[i;j;k],n) = a + b

          CHF_ENDDO

        enddo

        return
        end



      subroutine setexact (
     &     CHF_FRA[rhs],
     &     CHF_BOX[box],
     &     CHF_CONST_REAL[dx])

      integer CHF_DDECL[i;j;k]
      integer n, ncomp
      REAL_T x, y, z
      REAL_T pi, sigma, r2, a

      ncomp = CHF_NCOMP[rhs]

      pi = Pi
      sigma = 0.1

      do n = 0, ncomp -1

        CHF_MULTIDO[box;i;j;k]

        z = 0.0
        CHF_DTERM[
        x = dx*(i+half);
        y = dx*(j+half);
        z = dx*(k+half) ]

        r2 = (x-0.5)*(x-0.5) + (y-0.5)*(y-0.5)
        a = sin(pi*x) * sin(pi*y) * exp(-1.0*(r2/(sigma*sigma) ) )

        rhs(CHF_IX[i;j;k],n) = a;

        CHF_ENDDO

      enddo

      return
      end

