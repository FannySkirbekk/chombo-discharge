C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"


C     -----------------------------------------------------------------
C     subroutine INCREMENTGRADDIVOP
C     computes directional component of (Laplacian(phi) + grad(div(phi))
C
C     INPUTS/OUTPUTS:
C     phi       =>  phi
C     dirPhi    =>  face-centered divergence of Phi
C     lofphi   <=   gradient of div(phi)
C     dx        =>  cell spacing
C     region    =>  cell-centered region on which to compute lofphi
C     dir       =>  direction in which to compute
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.
C
C     ------------------------------------------------------------------
      subroutine INCREMENTGRADDIVOP(
     &                              CHF_FRA[lofphi],
     &                              CHF_CONST_FRA[phi],
     &                              CHF_CONST_FRA[divPhi],
     &                              CHF_BOX[region],
     &                              CHF_CONST_REAL[dx],
     &                              CHF_CONST_INT[dir])


      REAL_T dxinv, lphi
      integer n,ncomp,phidir, temp, divcomp

      integer CHF_DDECL[ii,i;jj,j;kk,k]

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[lofphi]) then
C         print*, 'GSRBLEVELHELM:phi and rhs incompatible'
C         stop
         call MAYDAYERROR()
      endif


      CHF_DTERM[
          ii = CHF_ID(dir, 0);
          jj = CHF_ID(dir, 1);
          kk = CHF_ID(dir, 2)]


      dxinv = one/dx

      do n = 0, ncomp-1

c figure out which direction this phi is in (assume that phi is stored
c (phi0x, phi0y, phi0z, phi1x, phi1y, phi1z...) )
         temp = (n/CH_SPACEDIM)*CH_SPACEDIM
         phidir = n - temp


c  add in gradient(div(phi)) term if appropriate
         if (phidir.eq.dir) then
            divcomp = n/CH_SPACEDIM


            CHF_MULTIDO[region;i;j;k]
               lphi = dxinv*(divPhi(CHF_IX[i+ii;j+jj;k+kk],divcomp)
     &                      -divPhi(CHF_IX[i   ;j   ;k   ],divcomp))

               lofphi(CHF_IX[i;j;k],n) =  lofphi(CHF_IX[i;j;k],n) + lphi
            CHF_ENDDO
         endif

      enddo

      return
      end



