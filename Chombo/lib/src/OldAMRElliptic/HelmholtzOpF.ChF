C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

C     --------------------------------------------------------------
C     subroutine GSRBLEVELHELM
C     performs Red-Black Guass-Siedel on a level for the Helmholtz equation.
C     This is of the form:
C     phi = phi + lmabda (Lphi - rhs)
C
C     INPUTS (=>),  OUTPUTS(<=):
C     phi      <=> phi
C     beta      => the constant in the op L == (alpha + beta*laplacian)phi
C     alpha     => the constant alpha in  L == (alpha + beta*laplacian)phi
C     rhs       => rhs
C     region    => region on which to relax
C     dx        => grid spacing
C     redBlack  => which pass we are on
C
C     Warning: phi, rhs must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     dtgraves nov 2, 1999
C     --------------------------------------------------------------

      subroutine GSRBLEVELHELM(
     &     CHF_FRA[phi],
     &     CHF_CONST_FRA[rhs],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta],
     &     CHF_CONST_INT[redBlack])

!     ::: local variables
      REAL_T lambda,  helmop, lphi
      REAL_T dxinv,sum_b
      !XXX -- remove unused variables
      !XXXinteger CHF_DDECL[ii,i;jj,j;kk,k]
      integer CHF_DDECL[i;j;k]
      integer n,ncomp,idir,indtot,imin,imax

      dxinv = one/(dx*dx)

      sum_b = 0.0
      do idir = 0, CH_SPACEDIM-1
         sum_b = sum_b + two*dxinv
      enddo
      lambda = -one/(alpha - beta*sum_b)

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[rhs]) then
C         print*, 'GSRBLEVELHELM:phi and rhs incompatible'
C         stop
         call MAYDAYERROR()
      endif

      do n = 0, ncomp - 1
#if CH_SPACEDIM==3
         do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
            do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
               imin = CHF_LBOUND[region; 0]
               CHF_DTERM[indtot = imin; + j ; + k ]
C     add 0 or 1 to imin, so that imin+j+k has same parity as redBlack
C     petermc, 26 april 2001
               imin = imin + abs(mod(indtot + redBlack, 2))
               imax = CHF_UBOUND[region; 0]
               do i = imin, imax, 2

c     Unrolling the Space dimension loop and getting rid of temporaries
c     (ii,jj,kk) for performance. (ndk)
                 CHF_DTERM[
                 lphi =  ((phi(CHF_IX[i+1;j;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i-1;j;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j+1;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j-1;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j;k+1],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j;k-1],n)))*dxinv ]

                  helmop = alpha*phi(CHF_IX[i;j;k],n) + beta*lphi

                  phi(CHF_IX[i;j;k],n) = phi(CHF_IX[i;j;k],n) +
     &                  lambda*(helmop - rhs(CHF_IX[i;j;k],n))

               enddo
            enddo
#if CH_SPACEDIM > 1
         enddo
#endif
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

C     -----------------------------------------------------------------
C     subroutine OPERATORHELM
C     computes 5-point operator for the Helmholtz equation
C
C     INPUTS/OUTPUTS:
C     phi       =>  phi
C     lofphi   <=   laplacian
C     region    =>  region on which laplacian is computed
C     dx        =>  cell spacing
C     nComp     =>  number of components in phi,lofphi
C     alpha     =>  the constant in the op L == (alpha + beta*laplacian)phi
C     beta     =>  the constant in the op L == (alpha + beta*laplacian)phi
C
C
C     Warning: phi, lofphi must have the same number
C     of components and span region.  Phi needs one more cell on
C     all sides
C
C     dtgraves nov 2, 1999
C     ------------------------------------------------------------------
      subroutine OPERATORHELM(
     &     CHF_FRA[lofphi],
     &     CHF_CONST_FRA[phi],
     &     CHF_BOX[region],
     &     CHF_CONST_REAL[dx],
     &     CHF_CONST_REAL[alpha],
     &     CHF_CONST_REAL[beta])

      REAL_T dxinv,helmop,lphi

      !XXX -- remove unused variables
      !XXXinteger CHF_DDECL[ii,i;jj,j;kk,k]
      !XXXinteger n,ncomp,idir
      integer CHF_DDECL[i;j;k]
      integer n,ncomp

      ncomp = CHF_NCOMP[phi]
      if(ncomp .ne. CHF_NCOMP[lofphi]) then
C         print*, 'OPERATORHELM:phi and rhs incompatible'
C         stop
         call MAYDAYERROR()
      endif

      dxinv = one/(dx*dx)
      do n = 0,ncomp-1
         CHF_MULTIDO[region; i; j; k]

                 CHF_DTERM[
                 lphi =  ((phi(CHF_IX[i+1;j;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i-1;j;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j+1;k],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j-1;k],n)))*dxinv;
     &                +  ((phi(CHF_IX[i;j;k+1],n)
     &                   - phi(CHF_IX[i;j;k],n))
     &                   -(phi(CHF_IX[i;j;k],n)
     &                   - phi(CHF_IX[i;j;k-1],n)))*dxinv ]

         helmop = alpha*phi(CHF_IX[i;j;k],n) + beta*lphi
         lofphi(CHF_IX[i;j;k],n) =  helmop

         CHF_ENDDO
      enddo

      return
      end
