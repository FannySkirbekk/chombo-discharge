#ifndef _ErrorList_H_
#define _ErrorList_H_
//
// $Id: ErrorList.H,v 1.2 2007-05-24 23:54:48 tdsternberg Exp $
//
#include <string>
#include <vector>

#include <REAL.H>
#include <ArrayLim.H>

extern "C"
{
    //
    // Type of extern "C" function called by ErrorRec to do tagging of cells for refinement.
    //
    typedef void (*ErrorFunc)(int* tag, ARLIM_P(tlo), ARLIM_P(thi),
                              const int* tagval, const int* clearval,
                              Real* data, ARLIM_P(data_lo), ARLIM_P(data_hi),
                              const int* lo, const int * hi, const int* nvar,
                              const int* domain_lo, const int* domain_hi,
                              const Real* dx, const Real* xlo,
                              const Real* prob_lo, const Real* time,
                              const int* level);
}

//
//@Man:
//@Memo: Error Record.
/*@Doc:

  ErrorRec is designed to tag cells for regridding based on the state
  data contained in AmrLevel and its derivatives.  It is conceivable that
  actual error tagging will be through derivation, so provision is made
  for this as well.
*/

class ErrorRec
{
public:
    //
    //@ManDoc: Error types.
    //
    enum ErrorType { Richardson=0, Special };
    //
    //@ManDoc: The constructor.
    //
    ErrorRec (const std::string& nm,
              int                ng,
              ErrorType          etyp,
              ErrorFunc          f);
    //
    //@ManDoc: The name of the quantity to derive.
    //
    const std::string& name () const;
    //
    //@ManDoc: The number of extra zones needed for derivation.
    //
    int nGrow () const;
    //
    //@ManDoc: The type of the error tagging.
    //
    ErrorType errType () const;
    //
    //@ManDoc: The extern "C" function to do the error tagging.
    //
    ErrorFunc errFunc () const;

private:
    //
    // Name of quantity to derive.
    //
    std::string derive_name;
    //
    // Number of extra zones.
    //
    int ngrow;
    //
    // Function to do error estimation.
    //
    ErrorFunc err_func;
    //
    // The type of Error.
    //
    ErrorType err_type; 
};

//
//@Man:
//@Memo: A List of ErrorRecs.
/*@Doc:

  Container class for ErrorRecs.
*/

class ErrorList
{
public:
    //
    //@ManDoc: The number of ErrorRecs in the list.
    //
    int size () const;
    //
    //@ManDoc: Append a new ErrorRec to the list.
    //
    void add (const std::string&  name,
              int                 nextra, 
              ErrorRec::ErrorType typ,
              ErrorFunc           func);
    //
    //@ManDoc: The kth ErrorRec.
    //
    const ErrorRec& operator[] (int k) const;

private:

    std::vector<ErrorRec> vec;
};

std::ostream& operator << (std::ostream& os, const ErrorList& elst);

#endif

