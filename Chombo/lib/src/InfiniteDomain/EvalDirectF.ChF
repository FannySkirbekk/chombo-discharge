C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

!=======================================================
!     subroutine ADDEVALDIRECTFACETOFACE
!     Add to potential on one face due to charges on another face.
!     => inputs,  <= outputs
!
!     pot <=> potential on dest face, incremented by source face
!     chgwt => charge on source face, multiplied by integration weights
!     potbox => NODEs of destination face on which pot lives
!     chgbox => NODEs of source face on which chg lives
!     hdst => mesh spacing in each dimension on destination face
!     bdst => physical location of origin on destination face
!     hsrc => mesh spacing in each dimension on source face
!     bsrc => physical location of origin on source face
!
!     petermc, 27 Aug 2004
!     modified 21 Sep 2004 to take weights of integration
!=======================================================

      subroutine ADDEVALDIRECTFACETOFACE(
     &     CHF_FRA1[pot],
     &     CHF_CONST_FRA1[chg],
     &     CHF_BOX[potbox],
     &     CHF_BOX[chgbox],
     &     CHF_CONST_REALVECT[hdst],
     &     CHF_CONST_REALVECT[bdst],
     &     CHF_CONST_REALVECT[hsrc],
     &     CHF_CONST_REALVECT[bsrc])
      integer CHF_DDECL[ichg; jchg; kchg]
      integer CHF_DDECL[ipot; jpot; kpot]
      REAL_T CHF_DDECL[xdif; ydif; zdif]
      REAL_T CHF_DDECL[xpot; ypot; zpot]
      REAL_T CHF_DDECL[xchg; ychg; zchg]
      REAL_T r, fac

      fac = fourth / PI

      CHF_MULTIDO[chgbox; ichg; jchg; kchg]

         CHF_DTERM[
         xchg = bsrc(0) + ichg * hsrc(0) ;
         ychg = bsrc(1) + jchg * hsrc(1) ;
         zchg = bsrc(2) + kchg * hsrc(2) ]

         CHF_MULTIDO[potbox; ipot; jpot; kpot]

            CHF_DTERM[
            xpot = bdst(0) + ipot * hdst(0) ;
            ypot = bdst(1) + jpot * hdst(1) ;
            zpot = bdst(2) + kpot * hdst(2) ]

            CHF_DTERM[
            xdif = xpot - xchg ;
            ydif = ypot - ychg ;
            zdif = zpot - zchg ]

            r = sqrt(CHF_DTERM[xdif*xdif; + ydif*ydif; + zdif*zdif])

            pot(CHF_IX[ipot; jpot; kpot]) =
     &           pot(CHF_IX[ipot; jpot; kpot]) +
     &           fac * chg(CHF_IX[ichg; jchg; kchg]) / r

         CHF_ENDDO

      CHF_ENDDO

      return
      end
