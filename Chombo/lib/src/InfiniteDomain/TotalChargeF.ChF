C      _______              __
C     / ___/ /  ___  __ _  / /  ___
C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
C    \___/_//_/\___/_/_/_/_.__/\___/
C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

!=======================================================
!     subroutine TOTALCENTROID
!     Get total charge and centroid of charge distribution.
!     => input, <= outputs
!
!     total <= total charge
!     centr <= centroid
!     arr => NODE-centered array containing charge distribution
!     bx => NODE-centered box on which arr lives
!     h => mesh spacings in dimensions (0:2)
!
!     petermc, 21 Oct 2004
      subroutine totalcentroid(
     &     CHF_REAL[total],
     &     CHF_REALVECT[centr],
     &     CHF_CONST_FRA1[arr],
     &     CHF_BOX[bx],
     &     CHF_CONST_REALVECT[h])
      integer i, j, k
      REAL_T x, y, z, xtot, ytot, ztot, dv, dm

      total = zero
      xtot = zero
      ytot = zero
      ztot = zero
      dv = h(0)*h(1)*h(2)
      CHF_MULTIDO[bx; i; j; k]
         dm = dv * arr(CHF_IX[i; j; k])
         total = total + dm
         x = i * h(0)
         y = j * h(1)
         z = k * h(2)
         xtot = xtot + x * dm
         ytot = ytot + y * dm
         ztot = ztot + z * dm
      CHF_ENDDO
      centr(0) = xtot / total
      centr(1) = ytot / total
      centr(2) = ztot / total

      return
      end


!=======================================================
!     subroutine SETPOTENTIAL
!     Set potential due to total charge and centroid.
!     => input, <= outputs
!
!     arr <= NODE-centered array containing charge distribution
!     total => total charge
!     centr => centroid
!     bx => NODE-centered box on which arr lives
!     h => mesh spacings in dimensions (0:2)
!
!     petermc, 21 Oct 2004
      subroutine setpotential(
     &     CHF_FRA1[arr],
     &     CHF_CONST_REAL[total],
     &     CHF_CONST_REALVECT[centr],
     &     CHF_BOX[bx],
     &     CHF_CONST_REALVECT[h])
      integer i, j, k
      REAL_T x, y, z, r

      CHF_MULTIDO[bx; i; j; k]
         x = i * h(0) - centr(0)
         y = j * h(1) - centr(1)
         z = k * h(2) - centr(2)
         r = sqrt(x*x + y*y + z*z)
         arr(CHF_IX[i; j; k]) = - total / (four * Pi * r)
      CHF_ENDDO

      return
      end
