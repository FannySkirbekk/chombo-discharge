#ifdef CH_LANG_CC
/*
 *      _______              __
 *     / ___/ /  ___  __ _  / /  ___
 *    / /__/ _ \/ _ \/  V \/ _ \/ _ \
 *    \___/_//_/\___/_/_/_/_.__/\___/
 *    Please refer to Copyright.txt, in Chombo's root directory.
 */
#endif

// DatasetClient.H

#ifndef _DATASETCLIENT_H_
#define _DATASETCLIENT_H_

#include "LayoutData.H"
#include "LevelData.H"
#include "FArrayBox.H"
#include "BaseFab.H"
#ifdef CH_MULTIDIM
#include "ArrayView_ExternC_Mangler.H" // Generated by lib/utils/multidim/mangle_externs.sh
#endif
#include "NamespaceHeader.H"

/// global functions for using the DatasetServer program
/** These are C functions that can be called from the debugger.
 *  Note that the array arg. is always a pointer.
 *  The separate DatasetServer program must already by runnig
 *  for these to work correctly.
 */

extern "C"
{
  /// View a single BaseFab\<Real\> or FAB
  /**
     Sends single fab information to DatasetServer port.
     For use inside debuggers.
   */
  bool ArrayView(BaseFab<Real>* a_debugFab);

  /// View a single BaseFab\<int\>
  /**
     Sends single fab of ints information to DatasetServer port.
     For use inside debuggers.
   */
  bool ArrayViewInt(BaseFab<int>* a_intFabPtr);

  /// View a single FAB with custom format and window title
  /**
     Sends a single FAB to the DatasetServer port
     using the given label and given format.
   @param debugFab is the FAB to view
   @param format is the printf format for numerical display ( ex:  "%5.3f" ).
   @param label  is the first part of the window title ( ex: "myfabname" ).
     For use inside debuggers.
   */
  bool ArrayViewFabFormatLabel(BaseFab<Real>* a_debugFab,
                               const char*    a_format,
                               const char*    a_label);

  /// View a LayoutData of FABs
  /**
     Send layoutdata information to the DatasetServer port.
     For use inside debuggers.
   */
  bool MultiArrayView(LayoutData<FArrayBox>* a_debugLayoutData);

  /// View a LevelData of FABs
  /**
     Send leveldata information to the DatasetServer port.
     This is for parallel debugging and can only be used
     inside the code.  If you use this inside the debugger
     in parallel, it will hang on a leveldata::copyTo call.
   */
  bool ArrayViewLDF(LevelData<FArrayBox>* a_debugLevelData);

  /// View a LevelData of FABs with custom format and window title
  /**
     Send leveldata information to the DatasetServer port.
     @param data points to the LevelData to view
     @param format is the printf format for numerical display ( ex:  "%5.3f" ).
     @param label  is the first part of the window title ( ex: "myfabname" ).
     This is for parallel debugging and can only be used
     inside the code.  If you use this inside the debugger
     in parallel, it will hang on a leveldata::copyTo call.
   */
  bool ArrayViewLDFFormatLabel(LevelData<FArrayBox>* a_debugLevelData,
                               const char*           a_format,
                               const char*           a_label);

  /// View a LayoutData of FABs
  /**
      Send layoutdata information to the DatasetServer port.
      For use inside debuggers.
   */
  bool MultiArrayViewFab(LayoutData<FArrayBox>* a_debugLayoutData);

  /// View a LayoutData of BaseFab\<Real\>s
  /**
     Send LayoutData information to the DatasetServer port.
     For use inside debuggers.
   */
  bool MultiArrayViewRealBaseFab(LayoutData<BaseFab<Real> >* a_debugLayoutData);

  /// View a LayoutData of BaseFab\<Real\>s with custom format and title
  /**
     Send LayoutData information to the DatasetServer port.
     @param layoutdata points to the LayoutData to view
     @param format is the printf format for numerical display ( ex:  "%5.3f" ).
     @param label  is the first part of the window title ( ex: "myfabname" ).
     For use inside debuggers.
   */
  bool MultiArrayViewFormatLabel(LayoutData<BaseFab<Real> >* a_layoutdata,
                                 const char*                 a_format,
                                 const char*                 a_label);

  //
  /*
     don't use this.
   */
  bool ArrayViewRealPtrArrayNVarDims(Real*       a_data[],
                                     int         a_nvar,
                                     const int*  a_lodim,
                                     const int*  a_hidim,
                                     const char* a_format,
                                     const char* a_label);
}

//
/*
arrayview_user_port_offset:

allows the user to connect to a different port.  this is meant to
be used when you kill your DatasheetServer and want to statrt
another one immediately (primarily during debugging), since the
socket it opens will not be closed promptly by the system.  on a
multiuser system, you could accidentally connect to someone else's
server by doing this.

usage: set it in user code prior to calling an ArrayView function.
it is not necessary to declare it in user code.
*/
extern int arrayview_user_port_offset;

//
/*
 */
extern bool CreateSocket(int& a_newsocket);

/*
 */
extern bool SendRealArray(int        a_sockfd,
                          Real*      a_data[],
                          int        a_nvar,
                          const int* a_lodim,
                          const int* a_hidim);

//
/*
 */
extern bool SendString(int         a_sockfd,
                       const char* a_sendstring);

#include "NamespaceFooter.H"
#endif
