      subroutine advectivederiv(
     &     chf_fra1[udelrho],
     &     chf_const_fra1[facerho],
     &     chf_const_fra1[facevel],
     &     chf_const_int[facedir],
     &     chf_const_int[ncomp],
     &     chf_const_real[dx],
     &     chf_box[dcalc],
     &)

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv
      real_t  uave, rhodiff, hival, loval
      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

         do iv = 0,ncomp - 1

            chf_multido[dcalc;i;j;k]

            hival = facevel(chf_ix[i+ioff;j+joff;k+koff])*facerho(chf_ix[i+ioff;j+joff;k+koff])
            loval = facevel(chf_ix[i     ;j     ;k     ])*facerho(chf_ix[i     ;j     ;k     ])


            udelrho(chf_ix[i;j;k]) = udelrho(chf_ix[i;j;k]) + (hival-loval)/dx

            chf_enddo

         enddo
         ch_flops=ch_flops+CHF_POINTS[dcalc]*5*ncomp

      return
      end

      subroutine consdiv_reg(
     &     chf_fra1[udelrho],
     &     chf_const_fra1[faceflux],
     &     chf_const_int[facedir],
     &     chf_const_int[ncomp],
     &     chf_const_real[dx],
     &     chf_box[dcalc],
     &)

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv
      real_t  uave, rhodiff, hival, loval
      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

         do iv = 0,ncomp - 1

            chf_multido[dcalc;i;j;k]

            hival = faceflux(chf_ix[i+ioff;j+joff;k+koff]);
            loval = faceflux(chf_ix[i     ;j     ;k     ]);


            udelrho(chf_ix[i;j;k]) = udelrho(chf_ix[i;j;k]) + (hival-loval)/dx

            chf_enddo

         enddo
         ch_flops=ch_flops+CHF_POINTS[dcalc]*5*ncomp

      return
      end

      subroutine advective_cfl(
     &     chf_const_fra[velo],
     &     chf_const_real[dx],
     &     chf_box[region]
     &     chf_real[min_dt],
     &)

      real_t vel, dt
      integer chf_ddecl[i; j; k]
      do j=CHF_LBOUND[region;1], CHF_UBOUND[region,1]
      
      enddo
#if CH_SPACEDIM==3
c      do k = CHF_LBOUND[region;2], CHF_UBOUND[region;2]
#endif
c          do j = CHF_LBOUND[region;1], CHF_UBOUND[region;1]
c             do i = CHF_LBOUND[region;0], CHF_UBOUND[region;0]
c 	       vel = CHF_DTERM[
c      &                velo(chf_ix[i;j;k],0)*velo(chf_ix[i;j;k],0);
c      &              + velo(chf_ix[i;j;k],1)*velo(chf_ix[i;j;k],1);
c      &              + velo(chf_ix[i;j;k],2)*velo(chf_ix[i;j;k],2)]
c 	       dt = dx/sqrt(vel)
c 	       min_dt = min(dt, min_dt)
c             enddo
c          enddo
c #if CH_SPACEDIM==3
c       enddo
c #endif

      return
      end

