      subroutine vector_length(
     &     chf_fra1[dst],
     &     chf_const_fra[src],
     &     chf_const_fra1[mask],
     &     chf_box[region] )

      real_t len2
      integer chf_ddecl[i;j;k]
      
      chf_multido[region;i;j;k]
         if(mask(chf_ix[i;j;k]) > 0.0) then
            len2 = CHF_DTERM[src(chf_ix[i;j;k], 0)*src(chf_ix[i;j;k], 0);
     &                     + src(chf_ix[i;j;k], 1)*src(chf_ix[i;j;k], 1);
     &                     + src(chf_ix[i;j;k], 2)*src(chf_ix[i;j;k], 2)];     
            dst(chf_ix[i;j;k]) = sqrt(len2)
         endif
      chf_enddo
      
      return
      end


      subroutine floor(
     &     chf_fra[src],
     &     chf_const_int[ncomps],
     &     chf_const_real[value],
     &     chf_box[region])

      integer ic
      integer chf_ddecl[i;j;k]

      do ic=0,ncomps-1
         chf_multido[region;i;j;k]
            src(chf_ix[i;j;k],ic) = max(value, src(chf_ix[i;j;k],ic))
         chf_enddo
      enddo      
      return
      
      end

      subroutine max_min_norm(
     &     chf_real[max_val],
     &     chf_real[min_val],
     &     chf_const_fra[src],
     &     chf_const_fra1[mask],
     &     chf_const_int[ncomps],
     &     chf_box[box])

      real_t value
      integer ic
      integer chf_ddecl[i;j;k]

      chf_multido[box;i;j;k]
         value = 0.0

         if(mask(chf_ix[i;j;k]) > 0.0) then
            do ic=0, ncomps-1
               value = value + src(chf_ix[i;j;k], ic)*src(chf_ix[i;j;k], ic)
            enddo
            value = sqrt(value)

            max_val = max(max_val, value)
            min_val = min(min_val, value)
         endif
      chf_enddo
      return

      end

      subroutine dot_product(
     &     chf_fra1[result],
     &     chf_const_fra[data1],
     &     chf_const_fra[data2],	
     &     chf_const_int[ncomps],
     &     chf_box[box])

      integer ic
      integer chf_ddecl[i;j;k]

      chf_multido[box;i;j;k]
         result(chf_ix[i;j;k]) = 0.0;
         do ic=0, ncomps-1
            result(chf_ix[i;j;k]) = result(chf_ix[i;j;k]) + data1(chf_ix[i;j;k], ic)*data2(chf_ix[i;j;k], ic)
         enddo
      chf_enddo
      return

      end

      subroutine vector_length2(
     &     chf_fra1[dst],
     &     chf_const_fra[src],
     &     chf_const_fra1[mask],
     &     chf_box[region] )

      real_t len2
      integer chf_ddecl[i;j;k]
      
      chf_multido[region;i;j;k]
         if(mask(chf_ix[i;j;k]) > 0.0) then
            len2 = CHF_DTERM[src(chf_ix[i;j;k], 0)*src(chf_ix[i;j;k], 0);
     &                     + src(chf_ix[i;j;k], 1)*src(chf_ix[i;j;k], 1);
     &                     + src(chf_ix[i;j;k], 2)*src(chf_ix[i;j;k], 2)];     
            dst(chf_ix[i;j;k]) = len2
         endif
      chf_enddo
      
      return
      end

      subroutine laplacian(
     &     chf_fra1[lapl],
     &     chf_const_fra1[data],
     &     chf_box[region] )

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer dir

      chf_multido[region;i;j;k]
         lapl(chf_ix[i;j;k]) = 0.0
         do dir=1,CH_SPACEDIM
            chf_dterm[ioff = chf_id(0, dir);
                      joff = chf_id(1, dir);
                      koff = chf_id(2, dir)]
            lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k])
     &                          +     data(chf_ix[i+ioff; j+joff; k+koff])
     &                          - 2.0*data(chf_ix[i;      j;      k     ])
     &                          +     data(chf_ix[i-ioff; j-joff; k-koff])
         enddo
      chf_enddo
      
      return
      end

      subroutine flash_laplacian(
     &     chf_fra1[lapl],
     &     chf_const_fra1[data],
     &     chf_box[region] )

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ii; jj; kk]	
      integer chf_ddecl[ioff; joff; koff]
      integer dir, p, q
      real_t res, denom, uavg

      chf_multido[region;i;j;k]
         lapl(chf_ix[i;j;k]) = 0.0

c Compute the numerator with cross derivatives
         do p=1,CH_SPACEDIM
            chf_dterm[ioff = chf_id(0, p);
                      joff = chf_id(1, p);
                      koff = chf_id(2, p)]
            res = data(chf_ix[i+ioff;j+joff;k+koff]) - 2.0*data(chf_ix[i;j;k]) + data(chf_ix[i-ioff;j-joff;k-koff])
            lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k]) + 2*res*res
         enddo
c c Cross-terms, different for 2D and 3D
#if CH_SPACEDIM==2
c 1/dxdy
        res = 0.25*(data(i+1,j+1) - data(i+1,j-1) - data(i-1,j+1) + data(i-1,j-1))
        lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k]) + 2*res*res
#elif CH_SPACEDIM==3
c 1/(dxdy) and 1/(dydx)
        res = 0.25*(data(i+1,j+1,k) - data(i+1,j-1,k) - data(i-1,j+1,k) + data(i-1,j-1,k))
        lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k]) + 2*res*res
c 1/(dxdz) and 1/(dzdx)
        res = 0.25*(data(i+1,j,k+1) - data(i+1,j,k-1) - data(i-1,j,k+1) + data(i-1,j,k-1))
        lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k]) + 2*res*res
c 1/(dydz) and 1/(dzdy)
        res = 0.25*(data(i,j+1,k+1) - data(i,j+1,k-1) - data(i,j-1,k+1) + data(i,j-1,k-1))
        lapl(chf_ix[i;j;k]) = lapl(chf_ix[i;j;k]) + 2*res*res	
#endif

c Compute the denominator part with the gradients
        denom = 0.0
        do q=1,CH_SPACEDIM
           do p=1,CH_SPACEDIM
              chf_dterm[ioff = chf_id(0, p);
	                joff = chf_id(1, p);
			koff = chf_id(2, p)]

              res = 1.E-1*data(chf_ix[i;j;k])
c Shift point to iq+1 and compute |du/dxp|
              chf_dterm[ii = i + chf_id(0, q);
	                jj = j + chf_id(1, q);
			kk = k + chf_id(2, q)]
	      res = res + 0.25*abs((data(chf_ix[ii+ioff; jj+joff; kk+koff]) - data(chf_ix[ii-ioff; jj-joff; kk-koff])))

c Shift point to iq-1 and compute du/dxp
              chf_dterm[ii = i - chf_id(0, q);
	                jj = j - chf_id(1, q);
			kk = k - chf_id(2, q)]
              res = res + 0.25*abs((data(chf_ix[ii+ioff; jj+joff; kk+koff]) - data(chf_ix[ii-ioff; jj-joff; kk-koff])))
	      denom = denom + res*res
           enddo
        enddo

        lapl(chf_ix[i;j;k]) = sqrt(lapl(chf_ix[i;j;k])/denom)
c        lapl(chf_ix[i;j;k]) = sqrt(lapl(chf_ix[i;j;k]))/(data(chf_ix[i;j;k]))
      chf_enddo	 
      return
      end